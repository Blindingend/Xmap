<style lang="less">
  .swipe-item-wrapper{
    height: 100%;
    position: relative;
    overflow: hidden;
    padding: 0 10px;
    margin-top: 10rpx;
    .swipe-actions{
      display: flex;
      flex-direction: row;
      justify-content: center;
      align-items: center;
      height: 100%;
      width: auto;
      position: absolute;
      top: 0;
      z-index: 1;
      &.actions-left{
        left: 0;
      }
      &.actions-right{
        right: 0;
      }
    }
    .swipe-content{
      width: 100%;
      height: 100%;
      line-height: 90rpx;
      box-sizing: border-box;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 5;
      padding:0 18rpx;
      background-color: white;
      .swipe-title {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
      }
    }
    .swipe-btn{
      flex: 1;
      height: 100%;
      width: 140rpx;
      line-height: 90rpx;
      text-align: center;
      align-items: center;
      justify-content: center;
      color: white;
      display: flex;
      flex-direction: row-reverse;
      &.del{
        background-color: #ff4549;
        border-radius: 0rpx 16rpx 16rpx 0rpx;
      }
      &.delonly{
        background-color: #ff4549;
        border-radius: 16rpx;
      }
      &.edit{
        background-color: rgb(16, 142, 233);
        border-radius: 16rpx 0rpx 0rpx 16rpx;
      }
    }
  }
</style>
<template>
  <view class="swipe-item-wrapper">
    <view
      class="swipe-content"
      style="left:{{swipeData.style === 0 ? '0' : swipeData.style + 'rpx'}}"
      @touchstart="ts"
      @touchmove="tm"
      @touchend="te">
      <slot></slot>
    </view>
    <view class="swipe-actions actions-right">
      <view class="swipe-btn edit" wx:if={{manage}}>管理</view>
      <view class="swipe-btn {{manage? 'del':'delonly'}}" @tap.stop="handleRightBtnTap({{swipeData}})">删除</view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy'

  export default class Counter extends wepy.component {
    props = {
      swipeData: {
        type: Object,
        default: []
      },
      manage:{
        type:Boolean,
        default:false
      }
    }

    data = {
      startX: null,
      moveX: null
    }

    onLoad () {
      this.swipeData.style = 0
    }

    methods = {
      ts (e) {
        if (e.touches.length === 1) {
          this.startX = e.touches[0].clientX
          this.moveX = e.touches[0].clientX
        }
      },
      tm (e) {
        if (e.touches.length === 1) {
          // 手指起始点位置与移动期间的差值
          var distenceX = this.moveX - e.touches[0].clientX
          this.moveX = e.touches[0].clientX

          let threhold = this.manage? -280:-140;
          if ((this.swipeData.style - distenceX) < threhold) {
            this.swipeData.style = threhold
          } else if ((this.swipeData.style - distenceX) > 0) {
            this.swipeData.style = 0
          } else {
            this.swipeData.style = this.swipeData.style - distenceX
          }
          this.setData({
            swipeData: this.props.swipeData
          })
        }
      },

      te (e) {
        if (e.changedTouches.length === 1) {
          let threhold = this.manage? -140:-70;
          if (this.swipeData.style <= threhold) {
            this.swipeData.style = this.manage? -280:-140
          } else {
            this.swipeData.style = 0
          }
          this.setData({
            swipeData: this.props.swipeData
          })
        }
      },
      handleRightBtnTap (item) {
        item = JSON.parse(JSON.stringify(item))
        delete item.style
        this.$emit('delItem', item)
      }
    }
  }
</script>
