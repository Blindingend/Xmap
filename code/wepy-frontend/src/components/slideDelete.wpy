<style lang="less">
  .slide{
    width: 100%;
    height: 100%;
    position: relative;
    display: flex;
    flex-direction: row-reverse;
    background: #ffffff;
  }
  .slide-btn{
    width: 100%;
    font-size: 28rpx;
    color: #ffffff;
    background: #ffffff;
    display: flex;
    flex-direction: row-reverse;
  }
  .slide-btn view{
    width: 140rpx;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .slide-btn view:nth-child(1){
    background: #ff4549;
    border-radius: 16rpx;
    height: 100%;
    margin-top: 1vh;
  }
  .slide-btn view:nth-child(2){
    background: #FF8407;
    border-radius: 16rpx;
    height: 100%;
    margin-top: 1vh;
  }
  .slide-cont{
    width: 100%;
    min-height: 180rpx;
    display: flex;
    background: #ffffff;
    position: absolute;
    z-index: 1;
    transition: all 200ms ease-out;
  }

  .deleteManageOff{
    background: #ff4549;
    border-radius: 16rpx;
    height: 100%;
    margin-top: 1vh;
  }

  .deleteManageOn{
    background: #ff4549;
    border-radius:  0rpx,16rpx, 16rpx, 0rpx,;
    height: 100%;
    margin-top: 1vh;
  }





</style>

<template>
  <view class='slide'>
    <view class='slide-cont' style="transform: translateX({{offset}}rpx)" bind:touchstart="handstart" bind:touchmove="handmove" bind:touchend="handend">
      <slot></slot>
    </view>
    <view class='slide-btn'>
      <view class= "manage? deleteManageOn:deleteMangeOff" id="del" catchtap='_del' >删除</view>
      <view wx:if="{{manage}}" class='manage-class' id="manage" catchtap='_manage'>管理</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  const winW = wx.getSystemInfoSync().screenWidth; // 屏幕宽度
  const ratio = 750 / winW //px && rpx 单位转换 (乘于 这个属性是 px 转换成 rpx)


  export default class slideDelete extends wepy.component {



    components = {

    }

    props = {
      // 是否显示管理按钮
      manage: {           // 属性名
        type: Boolean,  // 类型（必填）,String, Number, Boolean, Object, Array, null（表示任意类型）
        value: false  // 属性初始值（可选），如果未指定则会根据类型选择一个
      }
    }


    data={
      offset: 0, // 内容区域滑动的位移
      start: 0,  // 手指触屏的开始位置
      move: 0,   // 手指移动的位置
      btnWidth: 140,  // 按钮的宽度
      lock: false,   // 限制模块右滑
      now: 0         //为标记滑动位置设置的变量
    }
    watch={
      offset(newvalue, oldvalue) {
        let max = this.manage? -380:-140;
        this.offset = newvalue < max ? max : newvalue
      }
    }
    methods={
      // 手指开始滑动
      handstart (e) {
        this.start = e.changedTouches[0].clientX
        console.log("begin move")
      },
      // 手指滑动过程
      handmove (e) {
        var offset = this.offset
        var start = this.start
        var width = this.btnWidth
        var lock = this.lock
        var move = this.move = e.changedTouches[0].clientX
        if (move - start < 0 || lock){
          if (move - start < 0){
            this.now++
          }else{
            this.now=0
          }

          this.start=start;
          this.move=move;
          this.offset=this.now == 0 ? (move - start) * ratio : (move - start) * ratio - width
        }
        console.log(this.offset)
      },
      // 手指结束滑动，然后抬起
      handend (e) {
        var width = this.btnWidth
        // console.log(this.offset)
        if (this.offset < 0) {
          if (this.manage){
            width = 280
          }
          this.btnWidth= width
          this.offset=-width
          this.lock = true
        } else {
          this.offset=0
          this.lock = false
          this.now = 0
        }
      },

      // 删除
      _del () {
        this.triggerEvent('delete') //触发删除回调
        this.offset=0          //为了让模块内容部分滑动到原点

      },

      // 喜欢
      _manage () {
        this.triggerEvent('manage') //触发删除回调
        this.offset=0            //为了让模块内容部分滑动到原点
      },
    }
  }

</script>
