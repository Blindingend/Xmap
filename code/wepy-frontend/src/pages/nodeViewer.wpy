<style>
  .searchInput{
    height: 7vh;
    width: 660rpx;
    margin-top: 2vh;
    font-size: 32rpx;
    font-weight: lighter;
    text-align: center;
    background-color: white;
    border-radius: 4vh;
    border: rgb(242,242,242);
    border-style: solid;
    border-width: 4rpx;
  }

  .nodeSelect {
    width: 680 rpx;
    height: 110rpx;
    background-color: white;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }

  .nodeSelectItem{
    width: 320rpx;
    height: 100rpx;
    border-radius: 16rpx;
    font-size: 28rpx;
    font-weight: lighter;
    background-color: rgb(242,242,242);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }
  .cancel{
    width: 34rpx;
    height: 34rpx;
  }

  .pathsAvailable{
    margin-top: 1vh;
    margin-left: 3%;
    padding-left: 4%;
    width: 90%;
    height: 200rpx;
    border-radius: 16rpx;
    background: #ededed;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .pathsAvailable view{

  }
</style>

<template>
  <view>
    <!--search input box-->
    <view style="height: 9vh; display: flex; flex-direction: row;">
      <input class="searchInput" bindinput="searchInput" name="input" placeholder="输入搜索信息"/>
      <picker bindchange="bindDataSetChange"  range="{{dataSetNameList}}">
        <view class="picker">
          {{dataSet === null ? "选组" : dataSet.name}}
        </view>
      </picker>
    </view>

    <!--show the selected start node and end node-->
    <view class="nodeSelect">
      <view style="background-color: white;color: white;z-index: -1;height: 100rpx;width: 1rpx">xx</view>
      <view class="nodeSelectItem" wx:if="{{origin !== null}}">
        <view>起点:{{origin.name}} </view>
        <view class="cancel" @tap="nodeCancel" id="1">
          <image id="1" style="width: 34rpx; height: 34rpx" mode="aspectFill" src="../icons/cancel.svg"></image>
        </view>
      </view>
      <view class="nodeSelectItem" style="margin-left: 30rpx" wx:if="{{end !== null}}">
        <view>终点:{{end.name}} </view>
        <view class="cancel" @tap="nodeCancel" id="2">
          <image id="2" style="width: 34rpx; height: 34rpx" mode="aspectFill" src="../icons/cancel.svg"></image>
        </view>
      </view>
    </view>
    <!--show the available node-->
    <view wx:if="{{originToEndList === null}}">
      <scroll-view style="height: 750rpx" scroll-y bindscrolltolower="touchLow" class="nodeGroup">
        <view wx:if="{{origin === null}}">
          <repeat  for="{{originNodes}}" index="index" item="item">
            <oNode  :node="item"></oNode>
          </repeat>
        </view>
        <view wx:else>
          <repeat  for="{{endNodes}}" index="index" item="item">
            <eNode  :node="item"></eNode>
          </repeat>
        </view>
      </scroll-view>
    </view>
    <view wx:else>
      <scroll-view style="height: 60vh;" scroll-y bindscrolltolower="touchLowPath" class="nodeGroup">
        <repeat  for="{{originToEndList}}" index="index" item="item">
          <view class="pathsAvailable"  data-paths="{{item.paths}}" @tap="pathView">
            <view style="font-size: 40rpx">路线 {{index+1}}</view>
            <view style="font-size: 32rpx;font-weight: lighter;color: #383838">由 {{(item.paths.length-1)/2}} 条路线拼接而成</view>
            <view style="font-size: 32rpx;font-weight: lighter;color: #383838">共经过 {{(item.paths.length+1)/2}} 个点</view>
          </view>
        </repeat>
      </scroll-view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import {httpHead, imgHead} from '../properties/Const'
  import node from '../components/node'

  export default class NodeViewer extends wepy.page {
    onLoad() {
      let data = {
        buildingId: this.$parent.globalData.building.id,
        skip: 0,
        limit: this.limit,
      }
      this.searchNode(data);
    }
    onPullDownRefresh(){
      let data = {
        buildingId: this.$parent.globalData.building.id,
        skip: 0,
        limit: this.limit,
      }
      this.pathSkip = 0;
      this.originSkip = 0;
      this.endSkip = 0;
      this.origin = null;
      this.end = null;
      this.searchNode(data);
      wx.stopPullDownRefresh()
    }

    config = {
      navigationBarTitleText: 'NodeView',
      enablePullDownRefresh: true,
      backgroundColor: "#1cf001"
    }
    data = {
      name: "",
      dataSet: null,
      dataSetList: [],
      dataSetNameList: ["1","1","1","1","1","1","1","1","1","1","1",],
      showDataSet: false,
      originNodes: [],  // 查找到的点位
      endNodes:[],
      origin: null,
      end: null,
      originSkip: 0,
      endSkip: 0,
      pathSkip: 0,
      limit: 5,
      originToEndList: null,
    }
    components = {
      oNode: node,
      eNode: node
    }

    computed = {
      pathAmount(e){
        return (e-1)/2
      }
    }

    methods = {
      searchInput(e) {
        this.name = e.detail.value;
        this.originSkip = 0;
        this.endSkip = 0;
        let data = {
          name: this.name,
          skip: 0,
          limit: this.limit,
        }
        if (this.origin !== null) {
          data.originId = this.origin.id;
        }
        else {
          data.buildingId = this.$parent.globalData.building.id
        }
        this.searchNode(data);
      },

      nodeCancel(e) {
        let id = e.target.id;
        console.log(e.target)
        if (id === "1") {
          this.origin = null;
          this.end = null;
        }
        else {
          this.end = null;
        }
        this.originToEndList = null;
      },

      touchLow() {
        let data = {
          buildingId: this.$parent.globalData.building.id,
          name: this.name,
          skip: this.origin === null ? this.originSkip : this.endSkip,
          limit: this.limit,
        }
        this.searchNode(data);
      },

      touchLowPath() {
        this.searchPath(this.pathSkip);
      },

      pathView(e) {
        this.$preload("originToEnd", e.currentTarget.dataset.paths);
        wx.navigateTo({
          url: '/pages/pathInfo',
        })
      },

      bindDataSetChange() {
        this.showDataSet = true;
      }
    }

    events = {
      'tap-Node': (node, $event) => {
        if (this.origin === null) {
          this.origin = node;
          let data = {
            originId: node.id,
            skip: this.endSkip,
            limit: this.limit,
          }
          console.log(data);
          this.searchNode(data);
        }
        else {
          if (this.origin.id !== node.id) {
            this.end = node;
            this.pathSkip = 0;
            this.searchPath(this.pathSkip);
          }
          else {
            wx.showToast({
              title: '起点终点不能相同',
              icon: 'none',
            })
          }
        }
        //$event.$destroy();
      }
    }

    async searchNode(data) {
      try {
        if (this.dataSet !== null){
          data.dataSetId = this.dataSet.id;
        }
        console.log(data);
        let res = await wepy.request({
          url: httpHead + '/nodes',
          data: data
        })
        console.log(res.data);
        if (res.data.nodes.length > 0) {
          let nodes = res.data.nodes.map((item) => {
            return {...item, img: imgHead + item.img}
          });
          if (data.originId) {
            if (data.skip === 0) {
              this.endNodes = nodes;
            }
            else if (this.endNodes.length === data.skip) {
              this.endNodes = [...this.endNodes, ...nodes];
            }
            this.endSkip += nodes.length;
          }
          else {
            if (data.skip === 0) {
              this.originNodes = nodes;
            }
            else if (this.originNodes.length === data.skip) {
              this.originNodes = [...this.originNodes, ...nodes];
            }
            this.originSkip += nodes.length;
          }
        }
        else {
          if (data.skip === 0)
          {
            wx.showToast({
              title: '没有满足条件的点位',
              icon: 'none',
            })
            if (data.originId) {
              this.endNodes = [];
            }
            else{
              this.originNodes = [];
            }
          }
          else{
            wx.showToast({
              title: '没有更多了',
              icon: 'none',
            })
          }
        }
        this.$apply();
      } catch (e) {
        console.log(e);
      }
    }

    async searchPath(skip) {
      try {
        let res = await wepy.request({
          url: httpHead + '/nodes/twonodes/v2',
          data: {
            nId1: this.origin.id,
            nId2: this.end.id,
            skip: skip,
            limit: this.limit
          }
        })
        console.log(res.data);
        if (res.data.length > 0) {
          if (skip === 0) {
            this.originToEndList = res.data;
          }
          else{
            this.originToEndList = [...this.originToEndList, ...res.data];
          }
          this.pathSkip += res.data.length;
        }
        else{
          if (skip === 0)
          {
            wx.showToast({
              title: '没有满足条件的路线',
              icon: 'none',
            })
            this.paths = [];
          }
          else{
            wx.showToast({
              title: '没有更多了',
              icon: 'none',
            })
          }
        }
        this.$apply();
      }
      catch (e) {
        console.log(e);
      }
    }

    async searchDataSet() {
      try{
        let res = await wepy.request({
          url: httpHead + '/dataset',
          data: {
            buildingId: this.$parent.globalData.building.id,
            limit: 50,
          }
        })
        this.dataSetList = res.data.dataSets.filter((item)=>{
          return item.type === 'node';
        });
        this.dataSetNameList = this.dataSetList.map((item)=>{
          return item.name;
        })
        this.$apply();
      }catch (e)
      {
        console.log(e);
      }
    }
  }
</script>
