<style>
  .searchInput {
    height: 6vh;
    width: 600rpx;
    font-size: 32rpx;
    font-weight: lighter;
    text-align: center;
    background-color: #f2f2f2;
    border-radius: 4vh;
    border: rgb(242, 242, 242);
    border-style: solid;
    border-width: 4rpx;
  }
  .nodeSelect {
    width: 680 rpx;
    height: 10vh;
    background-color: white;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }
  .nodeSelectItem {
    width: 320rpx;
    height: 100rpx;
    border-radius: 16rpx;
    font-size: 28rpx;
    font-weight: lighter;
    background-color: rgb(242, 242, 242);
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
  }
  .cancel {
    width: 34rpx;
    height: 34rpx;
  }
  .pathAvailable {
    margin-top: 1vh;
    margin-left: 3%;
    padding-left: 4%;
    width: 90%;
    height: 200rpx;
    border-radius: 16rpx;
    background: #ededed;
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  .pathsAvailable view {}
</style>

<template>
  <view>
    <!--search input box-->
    <view style="height: 9vh; display: flex; flex-direction: row; justify-content: center; align-items: center;">
      <view style="width: 70rpx; display: flex;align-items: center;justify-content: center" @tap="scan">
        <image mode="aspectFill" style="width: 50rpx; height: 50rpx;" src="../icons/qrCode.svg"></image>
      </view>
      <input class="searchInput" bindinput="searchInput" name="input" placeholder="输入搜索信息" />
      <picker bindchange="bindDataSetChange" range="{{dataSetNameList}}">
        <view style="width: 70rpx; display: flex;align-items: center;justify-content: center" class="picker">
          <image mode="aspectFill" style="width: 50rpx; height: 50rpx;" src="../icons/groupSelector.svg"></image>
        </view>
      </picker>
    </view>
    <!--show the selected start node and end node-->
    <view class="nodeSelect">
      <view style="background-color: white;color: white;z-index: -1;height: 100rpx;width: 1rpx">xx</view>
      <view class="nodeSelectItem" wx:if="{{origin !== null}}">
        <view>起点:{{origin.name}} </view>
        <view class="cancel" @tap="nodeCancel" id="1">
          <image id="1" style="width: 34rpx; height: 34rpx" mode="aspectFill" src="../icons/cancel.svg"></image>
        </view>
      </view>
      <view class="nodeSelectItem" style="margin-left: 30rpx" wx:if="{{end !== null}}">
        <view>终点:{{end.name}} </view>
        <view class="cancel" @tap="nodeCancel" id="2">
          <image id="2" style="width: 34rpx; height: 34rpx" mode="aspectFill" src="../icons/cancel.svg"></image>
        </view>
      </view>
    </view>
    <!--show the available node-->
    <view wx:if="{{originNodes.length !== 0}}">
      <view wx:if="{{originToEndList === null}}">
        <scroll-view style="height: 81vh" scroll-y bindscrolltolower="touchLow" class="nodeGroup">
          <view wx:if="{{origin === null}}">
            <repeat for="{{originNodes}}" index="index" item= "item">
              <oNode :node="item"></oNode>
            </repeat>
          </view>
          <view wx:else>
            <repeat for="{{endNodes}}" index="index" item="item">
              <eNode :node="item"></eNode>
            </repeat>
          </view>
        </scroll-view>
      </view>
      <view wx:else>
        <scroll-view style="height: 81vh;" scroll-y bindscrolltolower="touchLowPath" class="nodeGroup">
          <repeat for="{{originToEndList}}" index="index" item="item">
            <view class="pathAvailable" data-paths="{{item.paths}}" @tap="pathView">
              <view style="font-size: 40rpx">路线 {{index+1}}</view>
              <view style="font-size: 32rpx;font-weight: lighter;color: #383838">由 {{(item.paths.length-1)/2}} 条路线拼接而成</view>
              <view style="font-size: 32rpx;font-weight: lighter;color: #383838">共经过 {{(item.paths.length+1)/2}} 个点</view>
            </view>
          </repeat>
        </scroll-view>
      </view>
    </view>
    <view wx:else style="height: 81vh;display: flex;justify-content: center;align-items: center;color: #2b2b2b">
      <view>这栋建筑还没有点位, 快去创建吧！</view>
      <view>按名称查找路线请在首页搜索</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import {
    httpHead,
    imgHead
  } from '../properties/Const'
  import node from '../components/node'
  export default class NodeViewer extends wepy.page {
    onLoad() {
      let data = {
        buildingId: this.$parent.globalData.building.id,
        skip: 0,
        limit: this.limit,
      }
      this.searchNode(data);
      this.searchDataSet();
    }
    onPullDownRefresh() {
      let data = {
        buildingId: this.$parent.globalData.building.id,
        skip: 0,
        limit: this.limit,
      }
      this.dataSet = null;
      this.pathSkip = 0;
      this.originSkip = 0;
      this.endSkip = 0;
      this.origin = null;
      this.end = null;
      this.searchNode(data);
      this.searchDataSet();
      wx.stopPullDownRefresh()
    }
    config = {
      navigationBarTitleText: '点位查找',
      backgroundColor: "#90b3d0",
      "navigationBarBackgroundColor": "#90b3d0",
      "navigationBarTextStyle": "white",
      "enablePullDownRefresh": true,
    }
    data = {
      name: "",
      dataSet: null,
      dataSetList: [],
      dataSetNameList: [],
      originNodes: [], // 查找到的点位
      endNodes: [],
      origin: null,
      end: null,
      originSkip: 0,
      endSkip: 0,
      pathSkip: 0,
      limit: 5,
      originToEndList: null,
    }
    components = {
      oNode: node,
      eNode: node
    }
    computed = {
      pathAmount(e) {
        return (e - 1) / 2
      }
    }
    methods = {
      searchInput(e) {
        this.name = e.detail.value;
        this.originSkip = 0;
        this.endSkip = 0;
        let data = {
          name: this.name,
          skip: 0,
          limit: this.limit,
        }
        if (this.origin !== null) {
          data.originId = this.origin.id;
        } else {
          data.buildingId = this.$parent.globalData.building.id
        }
        this.searchNode(data);
      },
      nodeCancel(e) {
        let id = e.target.id;
        console.log(e.target)
        if (id === "1") {
          this.origin = null;
          this.end = null;
        } else {
          this.end = null;
        }
        this.originToEndList = null;
      },
      touchLow() {
        let data = {
          buildingId: this.$parent.globalData.building.id,
          name: this.name,
          skip: this.origin === null ? this.originSkip : this.endSkip,
          limit: this.limit,
        }
        this.searchNode(data);
      },
      touchLowPath() {
        this.searchPath(this.pathSkip);
      },
      pathView(e) {
        this.$preload("originToEnd", e.currentTarget.dataset.paths);
        wx.navigateTo({
          url: '/pages/pathsOverview',
        })
      },
      bindDataSetChange(e) {
        console.log(e);
        this.dataSet = this.dataSetList[parseInt(e.detail.value)];
        console.log(this.dataSet)
        this.pathSkip = 0;
        this.originSkip = 0;
        this.endSkip = 0;
        this.origin = null;
        this.end = null;
        let data = {
          buildingId: this.$parent.globalData.building.id,
          skip: 0,
          limit: this.limit,
        }
        this.searchNode(data);
      },
      async scan() {
        try {
          let res = await wepy.scanCode({
            onlyFromCamera: true,
            scanType: ['qrCode']
          });
          console.log(res);
          let result = JSON.parse(res.result);

          if (result.token !== undefined) {
            this.scanLogin(result);
          } else if (result.id !== undefined) {
            this.scanNode(result);
          }
        } catch (e) {
          wx.showToast({
            title: '识别失败',
            icon: 'none',
          })
        }
      }
    }
    events = {
      'tap-Node': (node, $event) => {
        if (this.origin === null) {
          this.origin = node;
          let data = {
            originId: node.id,
            skip: this.endSkip,
            limit: this.limit,
          }
          console.log(data);
          this.searchNode(data);
        } else {
          if (this.origin.id !== node.id) {
            this.end = node;
            this.pathSkip = 0;
            this.searchPath(this.pathSkip);
          } else {
            wx.showToast({
              title: '起点终点不能相同',
              icon: 'none',
            })
          }
        }
        //$event.$destroy();
      }
    }
    async scanLogin(data) {
      try {
        let res = await wepy.request({
          url: httpHead + '/login/scan',
          method: "POST",
          data: {
            token: data.token,
            userId: this.$parent.globalData.userInfo
          }
        })
        console.log(res);
        if (res.data.code === 200) {
          wx.showToast({
            title: '登录成功',
            icon: 'none',
          })
        } else {
          wx.showToast({
            title: '登录信息失效',
            icon: 'none',
          })
        }
      } catch (e) {
        wx.showToast({
          title: '识别失败',
          icon: 'none',
        })
      }
    }
    async scanNode(node) {
      try {
        node.img = imgHead + node.img;
        this.origin = node;
        this.end = null;
        this.originSkip = 0;
        this.endSkip = 0;
        let data = {
          name: this.name,
          skip: 0,
          limit: this.limit,
        }
        if (this.origin !== null) {
          data.originId = this.origin.id;
        } else {
          data.buildingId = this.$parent.globalData.building.id
        }
        wx.showToast({
          title: '识别成功',
          icon: 'none',
        })
        this.searchNode(data);
      } catch (e) {
        wx.showToast({
          title: '识别失败',
          icon: 'none',
        })
      }
    }
    async searchNode(data) {
      try {
        if (this.dataSet !== null && data.originId === undefined) {
          data.dataSetId = this.dataSet.id;
        }
        console.log(data);
        let res = await wepy.request({
          url: httpHead + '/nodes',
          data: data
        })
        console.log(res.data);
        if (res.data.nodes.length > 0) {
          let nodes = res.data.nodes.map((item) => {
            return { ...item,
              img: imgHead + item.img
            }
          });
          if (data.originId) {
            if (data.skip === 0) {
              this.endNodes = nodes;
            } else if (this.endNodes.length === data.skip) {
              this.endNodes = [...this.endNodes, ...nodes];
            }
            this.endSkip += nodes.length;
          } else {
            if (data.skip === 0) {
              this.originNodes = nodes;
            } else if (this.originNodes.length === data.skip) {
              this.originNodes = [...this.originNodes, ...nodes];
            }
            this.originSkip += nodes.length;
          }
        } else {
          if (data.skip === 0) {
            if (data.originId) {
              wx.showToast({
                title: '没有以该点为起点的路线',
                icon: 'none',
              })
              this.endNodes = [];
            } else {
              wx.showToast({
                title: '没有满足条件的点位',
                icon: 'none',
              })
              this.originNodes = [];
            }
          } else {
            wx.showToast({
              title: '没有更多了',
              icon: 'none',
            })
          }
        }
        this.$apply();
      } catch (e) {
        console.log(e);
      }
    }
    async searchPath(skip) {
      try {
        let res = await wepy.request({
          url: httpHead + '/nodes/twonodes/v2',
          data: {
            nId1: this.origin.id,
            nId2: this.end.id,
            skip: skip,
            limit: this.limit
          }
        })
        console.log(res.data);
        if (res.data.length > 0) {
          if (skip === 0) {
            this.originToEndList = res.data;
          } else {
            this.originToEndList = [...this.originToEndList, ...res.data];
          }
          this.pathSkip += res.data.length;
        } else {
          if (skip === 0) {
            wx.showToast({
              title: '没有满足条件的路线',
              icon: 'none',
            })
            this.paths = [];
          } else {
            wx.showToast({
              title: '没有更多了',
              icon: 'none',
            })
          }
        }
        this.$apply();
      } catch (e) {
        console.log(e);
      }
    }
    async searchDataSet() {
      try {
        let res = await wepy.request({
          url: httpHead + '/dataset',
          data: {
            buildingId: this.$parent.globalData.building.id,
            limit: 50,
          }
        })
        this.dataSetList = res.data.dataSets.filter((item) => {
          return item.type === 'node';
        });
        this.dataSetNameList = this.dataSetList.map((item) => {
          return item.name;
        })
        this.$apply();
      } catch (e) {
        console.log(e);
      }
    }
  }
</script>
