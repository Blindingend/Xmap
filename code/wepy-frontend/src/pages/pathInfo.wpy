<style lang="less">
  .swiper{
    height: 100vh;
    width: 750rpx;
    .pathItems{
      background-color: #9BC1DF;
     }
    .singleNode{
      background-color: #91B493;
    }
  }
  .nodeInfo{
    height: 85vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  .nodeInfo image{
    width: 600rpx;
    height: 800rpx;
    border-radius: 16rpx;
  }
</style>

<template>
  <view>
    <swiper indicator-dots class="swiper">
      <repeat for="{{originToEnd}}" item="item">
        <swiper-item>
          <view wx:if="{{item.contents !== undefined}}">
            <view style="height: 85vh">
              <PathDisplay :pathArray.sync="item.contents"/>
            </view>
          </view>
          <view class="nodeInfo" wx:else>
            <view style="fontfont-weight: lighter;font-size:40rpx;height: 10vh;">{{item.name}}</view>
            <image mode="widthFix" src="{{item.img}}"></image>
          </view>
          <view style="display: flex;align-items: center;justify-content: center" @tap="like" id="{{index}}">
            <image mode="widthFix" style="width: 80rpx;height: 80rpx" src="{{favoriteArray[index]? '../icons/favorited.svg':'../icons/favorite.svg'}}"></image>
          </view>
        </swiper-item>
      </repeat>
    </swiper>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import {httpHead, imgHead} from '../properties/Const';
  import pathDisplay from '../components/pathDisplay';

  export default class Start extends wepy.page {
    components = {
      PathDisplay: pathDisplay
    }

    data = {
      originToEnd: [], // 从起点到终点的多段路径数组
      oteIndex: 0,     // 多段路径索引
      favoriteArray: [0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    }

    methods = {
      async like(e) {
        console.log(e.target)
        try {
          let index = e.target.id;
          let item = this.originToEnd[index];
          let res = wepy.request({
            url: httpHead + "/favorite?authorId=" + this.$parent.globalData.userInfo + "&favoriteId=" + item.id,
            method: "POST"
          })
          console.log(res);
        } catch (e) {
          console.log(e);
        }
      }
    }

    onLoad(params, data) {
      console.log(data.preload.originToEnd);
      this.originToEnd = data.preload.originToEnd.map((path, index) => {
        if (index % 2 === 0) {
          return { ...path, img: imgHead + path.img };
        } else {
          return {
            ...path, contents: path.contents.map((item) => {
              if (item.type === "img")
                return { ...item, message: imgHead + item.message };
              else
                return item;
            })
          }
        }
      });
    }
  }

</script>
